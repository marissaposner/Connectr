import requests

def query_milady_holders_ens_and_images(variables):
    url = "https://api.airstack.xyz/gql"  

    # Define the GraphQL query as a string
    query = '''
    query GetLastTenMiladyTransfersOnEthereum($_eq: Identity, $_eq1: Identity, $_in: [TokenType!], $blockchain: TokenBlockchain!, $limit: Int) {
      ethereumTransfers: TokenTransfers(
        input: {filter: {_or: [{from: {_eq: $_eq}}, {to: {_eq: $_eq1}}], tokenType: {_in: $_in}}, blockchain: $blockchain, limit: $limit}
      ) {
        TokenTransfer {
          amount
          blockNumber
          blockTimestamp
          from {
            addresses
          }
          to {
            addresses
          }
          tokenAddress
          transactionHash
          tokenId
          tokenType
          blockchain
        }
      }
    }
    '''

    # Prepare the headers and payload for the request
    headers = {
        "Content-Type": "application/json",
        "Authorization": "YOUR_AUTHORIZATION_TOKEN"  # If required by the API, replace with the actual authorization token
    }
    payload = {
        "query": query,
        "variables": variables,
    }

    # Make the request to the GraphQL API
    response = requests.post(url, json=payload, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        return response.json()
    else:
        print("Request failed with status code {}".format(response.status_code))
        return None

# Example usage:
variables = {
    "_eq": "0x5Af0D9827E0c53E4799BB226655A1de152A425a5",  # Replace with the token address
    "_eq1": "0x...",  # Replace with the other identity address
    "_in": ["ERC1155", "ERC721"],  # Replace with the token types (as an array)
    "blockchain": "ethereum",  # Replace with the blockchain name
    "limit": 10  # Replace with the desired limit
}

result = query_milady_holders_ens_and_images(variables)
print(result)